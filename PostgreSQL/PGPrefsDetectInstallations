#!/usr/bin/perl

# ================================================================================
#  PGPrefsDetectInstallations
#  PostgreSQL
#
#  Created by Francis McKenzie on 21/12/11.
#  Copyright (c) 2011 HK Web Entrepreneurs. All rights reserved.
# ================================================================================

# Globals
my $Script          = basename($0);
my $Path            = rel2abs($0);
my $Directory       = dirname($Path);
my $User            = `stat -f "%Su" ${HOME}`;
my $RunBy           = `id -u -n`;
my $Log             = "${HOME}/Library/Logs/PostgreSQL/$Script.log";
my $Debug           = Trim("$ENV{DEBUG}");

# ================================================================================
#
#  Main ()
#
#  Entry point for script - parse args and call appropriate function
#
# ================================================================================
my $MAIN_USAGE = 'Usage: Main()';

sub Main() {
    # Parse command-line args
    for my $arg (@ARGV) {
        $Debug = 1 if /\-\-debug/i =~ $arg;
    }
    Log "${Script} @ARGV\nUSER=${User}\nRunBy=${RunBy}";
    
    # Start
    detectLaunchCtlAgents("sudo");
    detectLaunchCtlAgents();
    detectLaunchAgent();
    detectUsingEnvironment;
    detectHomebrewInstall;
    detectDmgInstall;
    detectLastResort;
    exitWithResult;
}

# Check if have everything we need
checkAllDone() {
    if [ "$my_force_exit" == "Yes" -o \( -n "$my_pg_bin" -a -n "$my_pg_data" \) ]; then
        my_all_done="Yes";
    else
        my_all_done="No";
    fi
}

# Check if PGBIN dir contains pg_ctl and postgres
checkPGBIN() {
    if [ -n "$my_pg_bin" ]; then
        if [ ! \( -e "$my_pg_bin/pg_ctl" -a -e "$my_pg_bin/postgres" \) ]; then
            my_pg_bin="";
        fi
    fi
}

# Add installation
addPGInstallation() {
    eval "my_pg_installation${my_pg_installs}_pg_label=\"${my_pg_label}\"";
    eval "my_pg_installation${my_pg_installs}_pg_bin=\"${my_pg_bin}\"";
    eval "my_pg_installation${my_pg_installs}_pg_data=\"${my_pg_data}\"";
    eval "my_pg_installation${my_pg_installs}_pg_user=\"${my_pg_user}\"";
    eval "my_pg_installation${my_pg_installs}_pg_log=\"${my_pg_log}\"";
    eval "my_pg_installation${my_pg_installs}_pg_port=\"${my_pg_port}\"";
    eval "my_pg_installation${my_pg_installs}_pg_auto=\"${my_pg_auto}\"";
    my_pg_installs=$(( my_pg_installs+1 ));
}

# Print installs
generatePGInstallsJSON() {
    my_pg_installs_json="";
    my_sep="";
    my_next_sep=", {";
    for i in {0..$(( my_pg_installs-1 ))}
    do
        read -d '' my_pg_installs_json <<EOF
${my_pg_installs_json}${my_sep}\{
        "PGLABEL" = "${my_pg_label}",
        "PGBIN"   = "${my_pg_bin}",
        "PGDATA"  = "${my_pg_data}",
        "PGUSER"  = "${my_pg_user}",
        "PGLOG"   = "${my_pg_log}",
        "PGPORT"  = "${my_pg_port}",
        "PGAUTO"  = "${my_pg_auto}"
    }
EOF
        my_sep=${my_next_sep};
    done
    if [ -z "${my_pg_installs_json}" ]; then
        my_pg_installs_json="[]";
    else
        my_pg_installs_json="[\n    ${my_pg_installs_json}\n]";
    fi
}

# Scan plist file for PG variables
scanPlistFile() {
    resetPGVariables;
    my_pg_plist=$1;
    echo "SCAN: ${my_pg_plist}";
    if [ -z "$my_pg_label" ]; then
        my_pg_label=$(trim `/usr/libexec/PlistBuddy "${my_pg_plist}" -c print:Label 2>/dev/null`);
    fi
    if [ -z "$my_pg_user" ]; then
        my_pg_user=$(trim `/usr/libexec/PlistBuddy "${my_pg_plist}" -c print:UserName 2>/dev/null`);
    fi
    if [ -z "$my_pg_bin" ]; then
        my_pg_ctl=$(trim `/usr/libexec/PlistBuddy "${my_pg_plist}" -c print:Program 2>/dev/null`);
        if [ -n "$my_pg_ctl" ]; then
echo "DIR: ${my_pg_ctl}";
            my_pg_bin=`dirname "$my_pg_ctl"`;
            checkPGBIN
        fi
    fi
    if [ -z "$my_pg_data" ]; then
        my_pg_data=$(trim `/usr/libexec/PlistBuddy ${my_pg_plist} -c print:ProgramArguments 2>/dev/null | perl -0n -e 'if (/^.*-D\s*([^\n]*).*$/sg) { print $1; }'`);
    fi
    if [ -z "$my_pg_log" ]; then
        my_pg_log=$(trim `/usr/libexec/PlistBuddy ${my_pg_plist} -c print:StandardErrorPath 2>/dev/null`);
    fi
    if [ -z "$my_pg_bin" ]; then
        my_pg_ctl=$(trim `/usr/libexec/PlistBuddy ${my_pg_plist} -c print:ProgramArguments 2>/dev/null | perl -0n -e 'if (/^.*Array \{\s*([^\n]*).*$/sg) { print $1; }'`);
        if [ -n "$my_pg_ctl" ]; then
            my_pg_bin=`dirname $my_pg_ctl`;
            checkPGBIN
        fi
    fi
    if [ -z "$my_pg_auto" ]; then
        my_pg_auto=$(trim `/usr/libexec/PlistBuddy ${my_pg_plist} -c print:RunAtLoad 2>/dev/null`);
    fi
}

#
# RESULT
# ------
#
exitWithResult() {
    checkAllDone

    if [ "$my_all_done" == "Yes" ]; then
        addPGInstallation;
        generatePGInstallsJSON;
        ok "${my_pg_installs_json}";
    fi
}

# -------------------------------------------------------------------------------------------------
# 1. LAUNCHCTL
#
# A) Run '[sudo] launchctl list' and grep for loaded agents/daemons with 'postgre' in name
# B) For all found, search spotlight for .plist file with same label
# C) If found, add PostgreSQL installation to list using contents of .plist file
# -------------------------------------------------------------------------------------------------
#
detectLaunchCtlAgents() {
    # May or may not require sudo
    my_sudo="";
    if [ -n "$1" ]; then
        my_sudo="sudo ";
    fi

    # A) Run '[sudo] launchctl list' and grep for loaded agents/daemons with 'postgre' in name
    eval "${my_sudo}launchctl list" | egrep -i ^.*postgre.*\$ | cut -f3 | while read my_pg_launchagent ; do

        # B) For all found, search spotlight for .plist file with same label
        mdfind -name .plist | while read my_pg_plist ; do
            scanPlistFile "${my_pg_plist}";
            if [ "${my_pg_label}" == "${my_pg_launchagent}" ]; then
                echo "LAUNCHAGENT: ${my_pg_label} --> ${my_pg_plist}";
                addPgInstallation;
            fi
        done

    done
}

#
# 1. LAUNCH AGENT
# ---------------
#
detectLaunchAgentInDir() {
    if [ "$my_all_done" != "Yes" ]; then

        # Find all .plist files in dir with 'postgresql' in name
        my_pg_launchagent_dir=$1;
        my_pg_launchagents=`find ${my_pg_launchagent_dir} -name "*postgresql*" | grep \.plist$`;
        for my_pg_launchagent in ${my_pg_launchagents}; do

            # B) If found, deduce PGBIN, PGDATA, PGUSER, PGLOG from .plist file
            scanPlistFile "$my_pg_launchagent"
            checkAllDone
            if [ "$my_all_done" == "Yes" ]; then
                log "Using: $my_pg_launchagent";
                break
            fi

        done
    fi
}
detectLaunchAgent() {

    resetVariables;
    log "Detecting Launch Agents...";

    # A) Search /Library/LaunchDaemons, /Library/LaunchAgents & ~/Library/LaunchAgents for .plist file called *postgresql*
    detectLaunchAgentInDir "/Library/LaunchDaemons"
    detectLaunchAgentInDir "/Library/LaunchAgents"
    detectLaunchAgentInDir "$HOME/Library/LaunchAgents"
}

#
# 2. ENVIRONMENT
# --------------
#
detectUsingEnvironment() {

    resetVariables;

    # A) Get PGUSER, PGDATA, PGPORT from environment
    my_pg_user=$(trim `env | grep PGUSER= | cut -d = -f 2`);
    my_pg_data=$(trim `env | grep PGDATA= | cut -d = -f 2`);
    my_pg_port=$(trim `env | grep PGPORT= | cut -d = -f 2`);
    my_pg_log=$(trim `env | grep PGLOG= | cut -d = -f 2`);

    # B) Get pg_ctl from path - use its dir as PGBIN
    if [ -z "$my_pg_bin" ]; then
        if [ -z "$my_pg_ctl" ]; then
            my_pg_ctl=$(trim `which pg_ctl`);
        fi
        if [ -n "$my_pg_ctl" ]; then
            my_pg_bin=$(trim `dirname ${my_pg_ctl}`);
            checkPGBIN
        fi
    fi

}

#
# 3. HOMEBREW
# -----------
#
detectHomebrewInstall() {

    # Start with env variables - these will override everything else
    detectUsingEnvironment;
    echo "Detecting Homebrew install..." 1>&2

    # A) Search spotlight for Cellar directory
    my_pg_cellar=$(trim `mdfind -name Cellar | grep /Cellar$ | head -1`);
    if [ -n "$my_pg_cellar" ]; then

        # B) If found, search for org.postgresql.postgres.plist below this.
        my_pg_plist=$(trim `mdfind -name org.postgresql.postgres.plist -onlyin ${my_pg_cellar} | grep /org.postgresql.postgres.plist$ | head -1`);

        # C) If found, deduce PGBIN, PGDATA, PGUSER, PGLOG from .plist file
        if [ -n "$my_pg_plist" ]; then
            scanPlistFile $my_pg_plist
        fi
    fi

}

#
# 4. .DMG INSTALL
# ---------------
#
detectDmgInstall() {

    # Start with env variables - these will override everything else
    detectUsingEnvironment;
    log "Detecting Dmg install...";

    # A) Search spotlight for pg_env.sh
    my_pg_env_sh=$(trim `mdfind -name pg_env.sh | grep /pg_env.sh$ | head -1`);

    # B) If found, execute this file. Hopefully now have PGUSER, PGDATA, PGPORT
    if [ -n "$my_pg_env_sh" ]; then

        if [ -z "$my_pg_user" ]; then
            my_pg_user=$(trim `. $my_pg_env_sh; env | grep PGUSER= | cut -d = -f 2`);
        fi
        if [ -z "$my_pg_data" ]; then
            my_pg_data=$(trim `. $my_pg_env_sh; env | grep PGDATA= | cut -d = -f 2`);
        fi
        if [ -z "$my_pg_port" ]; then
            my_pg_port=$(trim `. $my_pg_env_sh; env | grep PGPORT= | cut -d = -f 2`);
        fi
        if [ -z "$my_pg_log" ]; then
            my_pg_log=$(trim `. $my_pg_env_sh; env | grep PGLOG= | cut -d = -f 2`);
        fi

        # C) Set PGBIN to bin subdirectory relative to pg_env.sh file
        if [ -z "$my_pg_bin" ]; then
            my_pg_home_dir=$(trim `dirname ${my_pg_env_sh}`);
            if [ -n "$my_pg_home_dir" ]; then
                my_pg_bin=`stat -f "%N" ${my_pg_home_dir}/bin 2>/dev/null`;
            fi
        fi

        # D) Assume no logging

    fi

}


#
# 5. LAST RESORT!
# ---------------
#
detectLastResort() {

    # Start with env variables - these will override everything else
    detectUsingEnvironment;
    log "Detecting last resort...";

    # A) Search spotlight for pg_ctl - use its dir as PGBIN
    if [ -z "$my_pg_bin" ]; then
        my_pg_ctl=$(trim `mdfind -name pg_ctl | grep /pg_ctl$ | head -1`);
        if [ -n "$my_pg_ctl" ]; then
            my_pg_bin=$(trim `dirname ${my_pg_ctl}`);
            checkPGBIN
        fi
    fi

    # B) If dir PGBIN/../data exists, then use this as PGDATA
    if [ -z "${my_pg_data}" -a -n "${my_pg_bin}" ]; then
        my_pg_data="${my_pg_bin}/../data";
        if [ ! -e "${my_pg_data}" ]; then
            unset my_pg_data; my_pg_data="";
        fi
    fi

    # C) Set PGUSER to owner of PGDATA (if exists), otherwise use current user
    if [ -e "${my_pg_data}" ]; then
        my_pg_user=`stat -f %Su ${my_pg_data}`;
    elif [ -z "${my_pg_user}" ]; then
        my_pg_user=$my_real_user;
    fi

    # D) Leave PGPORT, PGLOG blank

}

# ================================================================================
#
#  Trim (@strings)
#
#  Trims strings
#
# ================================================================================
my $TRIM_USAGE = 'Usage: Trim(@strings)';

sub Trim {
    
    # Check Args
    my (@strings) = @_;
    my @result = ();
    
    # Execute
    if (@strings) {
        for my $string (@strings) {
            $string =~ s/^\s+//;
            $string =~ s/\s+$//;
            push @result, $string;
        }
    }
    
    # Return
    return wantarray ? @result : join( '', @result );
}

# ================================================================================
#
#  Log (@msgs)
#
#  Logs msgs to ~/Library/Logs
#
# ================================================================================
my $LOG_USAGE = 'Usage: Log(@msgs)';

sub Log() {
    # Check Args
    my (@msgs) = Trim(@_);
    croak $LOG_USAGE
        if !@msgs;
    
    # Only log if in debug mode
    unless ($Debug) return;
    
    # Create log file if doesn't exist
    if (! -e $Log) {
        my $logdir = dirname($Log);
        
        # Make sure we've got a valid $Log file and $User
        die "Program Error: Log file '$Log' is invalid!" if !$logdir;
        die "Program Error: User '$User' is invalid!" if !$User;
        
        # Create the log dir & log
        system("su $User -c \"mkdir -p $logdir\"");
        system("su $User -c \"echo 'File Created' `date` >> $Log\"");
    }
    
	# Log messages
	open( LOG, ">>$Log" );
	print LOG localtime() . ": ";
	print LOG @msgs;
    
	# Print newline
	my $nonewline = !( $msgs[$#msgs] ) =~ /\n\s*$/ );
	if ($nonewline) {
		print LOG "\n";
	}
    
    # Return
	close(LOG);
}

# ================================================================================
#
#  Error (@msgs)
#
#  Logs error message and exits with error status
#
# ================================================================================
my $ERROR_USAGE = 'Usage: Error([@msgs])';

sub Error() {
    Log(@_);
    exit 1;
}

# ================================================================================
#
#  Error (@msgs)
#
#  Logs error message and exits with error status
#
# ================================================================================
sub Success() {
    Log(@_);
    exit 0;
}

# Run Main method and exit
Main();
exit 0;

=head1 NAME
 
 PGPrefsDetectInstallations
 
=head1 SYNOPSIS

 PGPrefsDetectInstallations [--debug]

 PGPrefsDetectInstallations --help
 PGPrefsDetectInstallations --man
 PGPrefsDetectInstallations --version
 
=head1 DESCRIPTION
 
 OVERVIEW:
 ---------

 Tries to find all PostgreSQL installations and deduce following environment variables:

   PGLABEL - The label to use for the launchctl agent that will start postgresql
   PGBIN   - Directory containing pg_ctl & postgres executables
   PGDATA  - Data directory for postgresql server
   PGUSER  - User that will run postgresql server
   PGLOG   - Log file for postgresql server
   PGPORT  - Port for postgresql server
   PGAUTO  - Whether or not postgresql server starts automatically on computer bootup


 LOGIC:
 ------

 Execute following steps to generate a list of PostgreSQL installations.

 1. LAUNCHCTL - ROOT
 -------------------

 A) Run 'sudo launchctl list' and grep for loaded agents/daemons with 'postgre' in name
 B) For all found, search spotlight for .plist file with same label
 C) If found, add PostgreSQL installation to list using contents of .plist file

 2. LAUNCHCTL - USER
 -------------------

 A) Run 'launchctl list' and grep for loaded agents/daemons with 'postgre' in name
 B) For all found, search spotlight for .plist file with same label
 C) If found, add PostgreSQL installation to list using contents of .plist file

 3. LAUNCH AGENTS
 ----------------

 A) Search /Library/LaunchDaemons, /Library/LaunchAgents & ~/Library/LaunchAgents for .plist file called *postgre*
 B) If found, and not already detected in prior step, add PostgreSQL installation to list using contents of .plist file

 4. HOMEBREW
 -----------

 A) Search spotlight for Cellar directory
 B) If found, search for org.postgresql.postgres.plist below this.
 C) If found, and not already detected in prior step, add PostgreSQL installation to list using contents of .plist file

 5. .DMG INSTALL
 ---------------

 A) Search spotlight for all pg_env.sh files
 B) For each found, execute file. Hopefully now have PGDATA, PGUSER, PGPORT
 C) Set PGBIN to bin subdirectory relative to pg_env.sh file
 D) For each found, and not already detected in prior step, add PostgreSQL installation to list with PGLABEL="org.postgresql.install#"

 6. ENVIRONMENT
 --------------

 A) Get PGUSER, PGDATA, PGPORT, PGLOG from environment
 B) Get pg_ctl from path - use its dir as PGBIN
 C) If we have everything we need, check that settings do not match an already-detected installation.
 D) If not, add PostgreSQL installation to list with PGLABEL="org.postgresql.environment"

 7. LAST RESORT!
 ---------------

 A) Search spotlight for pg_ctl - use its dir as PGBIN
 B) If dir PGBIN/../data exists, then use this as PGDATA
 C) Set PGUSER to owner of PGDATA (if exists), otherwise use current user
 D) Leave PGPORT, PGLOG blank
 E) If we have everything we need, check that settings do not match an already-detected installation.
 F) If not, add PostgreSQL installation to list with PGLABEL="org.postgresql.install#"


 RESULT (JSON)
 -------------
 [
   {
     "PGLABEL"="${PGLABEL}",
     "PGBIN"="${PGBIN}",
     "PGDATA"="${PGDATA}",
     "PGUSER"="${PGUSER}",
     "PGLOG"="${PGLOG}",
     "PGPORT"="${PGPORT}",
     "PGAUTO"="${PGAUTO}"
   },
   {
     "PGLABEL"="${PGLABEL}",
     "PGBIN"="${PGBIN}",
     "PGDATA"="${PGDATA}",
     "PGUSER"="${PGUSER}",
     "PGLOG"="${PGLOG}",
     "PGPORT"="${PGPORT}",
     "PGAUTO"="${PGAUTO}"
   }
 ]

 ==============================================================
 

=head1 OPTIONS
 
=over 8
 
=item B<--debug>
 
 Logs messages to ~/Library/Logs/PostgreSQL/PGPrefsDetectInstallations.log
 
=item B<--help>
 
 Prints a brief help message and exits.
 
=item B<--man>
 
 Prints the manual page and exits.
 
=item B<--version>
 
 Prints version information and exits.
 
=back
 
=head1 AUTHOR
 
 Francis McKenzie
 
=cut